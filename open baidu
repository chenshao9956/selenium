from selenium import webdriver #导入 selenium 下面的 webdriver 模块
driver = webdriver.Chrome()    #调用 webdriver 模块下的 Chrome()类（注意大小写），赋值给变量 driver
driver.get("https://www.baidu.com") #通过 driver 变量，调用 Chrome()类提供的 get()方法访问百度首页
driver.find_element_by_id("kw").send_keys("Selenium")
driver.find_element_by_id("su").click() # find_element_by_id()方法分别定位页面上的元素，并且通过 send_keys()和 click()做输入、单击操作
driver.quit()     #关闭浏览器                                          


#name 定位
find_element_by_name("wd")
# class 定位
find_element_by_class_name("s_ipt")
#tag 定位
#HTML 通过 tag 来定义不同页面的元素。例如，<input>一般用来定义输入框，<a>标签#用来定义超链接等。不过，因为一个标签往往用来定义一类功能，所以通过标签识别单个#元素的概率很低。例如，我们打开任意一个页面，查看前端代码时都会发现大量的<div>、
#<input>、<a>等标签
find_element_by_tag_name("input")
#link 定位
#link专门用来定位文本链接。百度输入框上面的几个文字链接的代码如下
find_element_by_link_text("新闻")
find_element_by_link_text("hao123")
find_element_by_link_text("地图")
find_element_by_link_text("视频")
find_element_by_link_text("贴吧")
#partial link 定位
#partial link 定位是对 link 定位的一种补充，有些文字链接比较长，这个时候我们可以
#取文字链接的部分文字进行定位，只要这部分文字可以唯一地标识这个链接即可
find_element_by_partial_link_text("一个很长的")
find_element_by_partial_link_text("文本链接")
#XPath 定位
#绝对路径定位
#find_element_by_xpath()方法是用 XPath 来定位元素的。这里主要用标签名的层级关系
#来定位元素的绝对路径，最外层为 html，在 body 文本内，一级一级往下查找。如果一个层
#级下有多个相同的标签名，那么就按上下顺序确定是第几个。例如，div[2]表示当前层级下
#第二个 div 标签
find_element_by_xpath("/html/body/div/div[2]/div/div/div/from/span/input")
find_element_by_xpath("/html/body/div/div[2]/div/div/div/from/span[2]/input
")
#利用元素属性定位
find_element_by_xpath("//input[@id='kw']")
find_element_by_xpath("//input[@id='su']")
#//input 表示当前页面某个 input 标签，[@id='kw'] 表示这个元素的 id 值是 kw。下面通过 name 和 class 来定位。
find_element_by_xpath("//*[@name='wd']")
find_element_by_xpath("//*[@class='s_ipt']")
#如果不想指定标签名，那么可以用星号（*）代替。当然，使用 XPath 不局限于 id、name
#和 class 这三个属性值，元素的任意属性都可以使用，只要它能唯一标识一个元素。
find_element_by_xpath("//input[@maxlength='100']")
find_element_by_xpath("//input[@autocomplete='off']")
find_element_by_xpath("//input[@type='submit']")

